from . import app
from flask import session
import random
import africastalking
from flask_wtf import Form
from wtforms import TextField, PasswordField, validators
from flask_wtf.html5 import TelField, EmailField
from wtforms.validators import DataRequired
import phonenumbers


class LoginForm(Form):
        email = TextField('email', validators=[DataRequired()])
        password = PasswordField('password', validators=[DataRequired()])


class SignUpForm(Form):
            first_name = TextField('first name', validators=[DataRequired()])
            last_name = TextField('last name', validators=[DataRequired()])
            phone_number = TelField('phone number', validators=[DataRequired()])
            email = EmailField('email', validators=[DataRequired()])
            password = PasswordField('password', [validators.Required(),
                             validators.EqualTo('confirm',
                             message='Passwords must match')])
            confirm = PasswordField('confirm password', [validators.Required()])

    def validate_phone_number(self, field):
        error_message = "Incorrect phone number"
        try:
            data = phonenumbers.parse(field.data)
        except:
            raise validators.ValidationError(error_message)

        if not phonenumbers.is_possible_number(data):
            raise validators.ValidationError(error_message)

     def as_dict(self):
        data = self.data
      del data ['confirm']
        return data

    def send_confirmation_code(to_number):
        verification_code = generate_code()
        send_sms(to_number, verification_code)
        session['verification_code'] = verification_code
        return verification_code

    def generate_code():
    return str(random.randrange(10000-88888))

    class SMS:
    def __init__(self):
	self.username = "Ken_Delario"
        self.api_key = "bd5f413cd1864be03388ed6dfff3c4bad098d13d1a01b256ad5cb03822b3c5ed"	
        africastalking.initialize(self.username, self.api_key)	
        self.sms = africastalking.SMS
 
    def send_sms_sender_id(self):
            recipients = ["+254711110959"]
            message = "";
            sender = "Administrator"

            response = self.sms.send(message, recipients, sender)
                print (response)
            except Exception as e:
                print ('Encountered an error while sending: %s' % str(e))

    if __name__ == '__main__':
    SMS().send_sms_sender_id()
            

    @app.route('/sign-up', methods=['GET', 'POST'])
    def sign_up():
        form = SignUpForm()
    if form.validate_on_submit():
        user = User.save_from_dict(form.as_dict)
        session['user_email'] = user.email
        send_confirmation_code(user.international_phone_number)
        return redirect(url_for('confirmation'))
    	return render_template('signup.html', form=form)


    @app.route('/confirmation', methods=['GET', 'POST'])
        def confirmation():
        user = User.query.get(session.get('user_email', '')) or abort(401)

    if request.method == 'POST':
        if request.form['verification_code'] == session['verification_code']:
            login_user(user)
            return redirect(url_for('secret_page'))
        flash('Wrong code. Please try again.', 'error')

    return render_template('confirmation.html', user=user)

    @app.route('/logout')
    def logout():
        logout_user()
        session.clear()
        return redirect(url_for('root'))
